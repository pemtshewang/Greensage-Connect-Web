generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  username  String   @unique
  email     String   @unique
  password  String
  isSuper   Boolean
}

model mqtt_user {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  username   String @unique
  password   String
  brokerId   String @unique
  brokerPort Int
  brokerIp   String
}

model User {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  username        String        @unique
  password        String
  cid             String        @unique
  mobile          String        @unique
  gewog           String
  dzongkhag       String
  registeredAt    DateTime      @default(now())
  verifiedAt      DateTime?
  controllers     Controller[]
  accessToken     AccessToken[]
  greenhouseCount Int           @default(0)
  irrigationCount Int           @default(0)
}

enum Type {
  Irrigation
  Greenhouse
}

model Controller {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  controllerId         String                @unique
  type                 Type
  name                 String
  user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId               String                @db.ObjectId
  readings             Reading[]
  waterScheduleRecords WaterScheduleRecord[]
  thresholdRecords     ThresholdRecord[]
}

model Reading {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  humidity     Float?
  temperature  Float?
  soilMoisture Float?
  Pressure     Float?
  controller   Controller @relation(fields: [controllerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  controllerId String     @db.ObjectId
}

model WaterScheduleRecord {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  startTime    DateTime
  endTime      DateTime
  controller   Controller @relation(fields: [controllerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  controllerId String     @db.ObjectId
}

model ThresholdRecord {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  soilMoisture Float?
  humidity     Float?
  temperature  Float?
  controller   Controller @relation(fields: [controllerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  controllerId String     @db.ObjectId
}

model NewsFeeds {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  title     String
  content   String
  image     String
  author    String
  isPublic  Boolean
}

model AccessToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}
